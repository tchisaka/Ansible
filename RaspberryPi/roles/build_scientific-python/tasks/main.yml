---
# ----- add package for installing pyenv -----
- name: apt-get install packages for scientific python
  become : yes
  apt: name={{ item }} state=latest force=yes
  with_items: '{{ build_sp_add_pkgs }}'

- name: pip install & update 
  pip: name={{ item.pkg }} executable={{ item.env }} state=latest
  become: yes
  with_items: '{{build_sp_pip_system_pkgs}}'

# ----- checking pyenv command -----
- name: checking pyenv command
  shell: pyenv versions
  register: pyenv_result
  changed_when: no
  failed_when: "'command not found' in pyenv_result.stderr"

# ----- checking python environment -----
- name: install python {{ build_sp_based_python }}
  shell: pyenv install {{ build_sp_based_python }}
  changed_when: no
  when: "'{{ build_sp_based_python }}' not in pyenv_result.stdout"
  
- name: make a virtualenv as "{{ build_sp_virtual_python }}"
  shell: pyenv virtualenv {{ build_sp_based_python }} {{ build_sp_virtual_python }}
  changed_when: no
  ignore_errors: yes
  register: virtual_pythin_is_exists
  when: "'{{ build_sp_virtual_python }}' not in pyenv_result.stdout"

#- debug: var=virtual_pythin_is_exists.stderr
#
#- name: uninstall virtualenv
#  shell: pyenv uninstall -f {{ build_sp_virtual_python }}
#  when: "'already exists' in virtual_pythin_is_exists.stderr"
#- name: re-install virtualenv
#  shell: pyenv virtualenv {{ build_sp_based_python }} {{ build_sp_virtual_python }}
#  when: "'already exists' in virtual_pythin_is_exists.stderr"

- name: pyenv rehash
  shell: pyenv rehash
  changed_when: no

# ----- make local python environment -----
- name: mkdir {{ build_sp_virtual_setup_dir }}
  file: >
    path={{ build_sp_virtual_setup_dir }}
    state=directory

- name: checking local virtualenv is setted or not
  stat: path={{ build_sp_virtual_setup_dir }}/.python-version
  register: pyenv_stat

- name: cheking virtualenv name if local virtualenv is exsist
  shell: cat .python-version
  args:
    chdir: '{{ build_sp_virtual_setup_dir }}'
  changed_when: no
  register: py_version
  when: pyenv_stat.stat.exists

- name: create local pyenv
  shell: pyenv local {{ build_sp_virtual_python }}
  args:
    chdir: '{{ build_sp_virtual_setup_dir }}'
  changed_when: no    
  when: (not pyenv_stat.stat.exists) or
        "py_version is not '{{ build_sp_virtual_python }}'"

# ----- install python modules -----
- name: pip install pkgs for virtualenv (common)
  pip: >
    name={{ item }}
    state=latest
    chdir={{ build_sp_virtual_setup_dir }}
    executable=pip3
  with_items: '{{ build_sp_pip_science_pkgs1 }}'

- name: pip install pkgs for virtualenv (Pi2 and pi3 only)
  pip: >
    name={{ item }}
    state=latest
    chdir={{ build_sp_virtual_setup_dir }}
    executable=pip3
  with_items: '{{ build_sp_pip_science_pkgs2 }}'
  when: ansible_architecture == 'armv7l'
