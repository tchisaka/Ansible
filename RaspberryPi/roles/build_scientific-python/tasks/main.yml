---
# ----- add package for installing pyenv -----
- name: apt-get install packages for scientific python
  become : true
  apt:
    name: "{{ item }}"
    state: latest
    force: yes
    update_cache: yes
  with_items: "{{ build_sp.add_pkgs }}"

# ----- checking pyenv command -----
- name: checking pyenv command
  shell: "{{ pyenv_cmd }} versions"
  register: pyenv_result
  changed_when: no
  failed_when: "'command not found' in pyenv_result.stderr"

# ----- checking python environment -----
- name: install python {{ build_sp.based_python }}
  shell: "{{ pyenv_cmd }} install {{ build_sp.based_python }}"
  changed_when: no
  when: build_sp.based_python not in pyenv_result.stdout
  
- name: make a virtualenv as {{ build_sp.virtual_python }}
  shell: "{{ pyenv_cmd }} virtualenv {{ build_sp.based_python }} {{ build_sp.virtual_python }}"
  changed_when: no
  ignore_errors: yes
  register: virtual_pythin_is_exists
  when: build_sp.virtual_python not in pyenv_result.stdout

- name: pyenv rehash
  shell: "{{ pyenv_cmd }} rehash"
  changed_when: false

# ----- make local python environment -----
- name: mkdir {{ build_sp.virtual_setup_dir }}
  file:
    path: "{{ build_sp.virtual_setup_dir }}"
    state: directory

- name: checking local virtualenv is setted or not
  stat: path={{ build_sp.virtual_setup_dir }}/.python-version
  register: pyenv_stat

- name: cheking virtualenv name if local virtualenv is exsist
  shell: cat .python-version
  args:
    chdir: "{{ build_sp.virtual_setup_dir }}"
  changed_when: false
  register: py_version
  when: pyenv_stat.stat.exists

- name: create local pyenv
  #shell: "{{ pyenv_cmd }} local {{ build_sp.virtual_python }}"
  shell: echo {{ build_sp.virtual_python }} > .python-version
  args:
    chdir: "{{ build_sp.virtual_setup_dir }}"
  changed_when: false
  ignore_errors: yes
  when: (not pyenv_stat.stat.exists) or
        (py_version.stdout != build_sp.virtual_python)

# ----- install python modules -----
- name: pip install pkgs for virtualenv
  pip:
    name: "{{ item }}"
    state: latest
    chdir:      "{{ ansible_user_dir }}/.pyenv/versions/{{ build_sp.virtual_python }}" 
    executable: "{{ ansible_user_dir }}/.pyenv/versions/{{ build_sp.virtual_python }}/bin/pip"
  with_items: "{{ build_sp.pip_science_pkgs }}"
  ignore_errors: yes
  when: ansible_architecture == 'armv7l'
